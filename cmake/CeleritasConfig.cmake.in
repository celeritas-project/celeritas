#---------------------------------*-CMake-*----------------------------------#
# Copyright 2022-2024 UT-Battelle, LLC, and other Celeritas developers.
# See the top-level COPYRIGHT file for details.
# SPDX-License-Identifier: (Apache-2.0 OR MIT)
#----------------------------------------------------------------------------#

# Set up CMAKE paths
get_filename_component(CELERITAS_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" DIRECTORY)
list(APPEND CMAKE_MODULE_PATH
  "${CELERITAS_CMAKE_DIR}"
)

#-----------------------------------------------------------------------------#
# Version compatibility
#
# To avoid unnecessary strictness (with non-obvious error messages) we do not
# use the `SameMajorVersion`/`SameMinorVersion` argument to
# \c write_basic_package_version_file . Instead we check for any requested
# package version here and warn deliberately if it doesn't match.
#-----------------------------------------------------------------------------#
# TODO for version 1.0.0: update logic to major version
if(((@PROJECT_NAME@_FIND_VERSION_MAJOR EQUAL 0
     AND @PROJECT_NAME@_FIND_VERSION_MINOR LESS @PROJECT_NAME@_VERSION_MINOR)
    OR @PROJECT_NAME@_FIND_VERSION_MAJOR GREATER 0)
   AND NOT @PROJECT_NAME@_FIND_VERSION_MAX VERSION_GREATER_EQUAL @PROJECT_NAME@_VERSION)
   message(AUTHOR_WARNING "@PROJECT_NAME@ version ${@PROJECT_NAME@_VERSION} "
     "may not be compatible with requested version "
     "${@PROJECT_NAME@_FIND_VERSION}: please update your find_package "
     "version range"
   )
endif()

#-----------------------------------------------------------------------------#
# Variables
#-----------------------------------------------------------------------------#

@CELERITAS_EXPORT_VARIABLES@

#-----------------------------------------------------------------------------#
# Dependencies
#-----------------------------------------------------------------------------#

include(CMakeFindDependencyMacro)

if(CELERITAS_USE_CUDA)
  find_dependency(CUDAToolkit REQUIRED QUIET)

  if(CELERITAS_USE_VecGeom AND NOT CMAKE_CUDA_COMPILER_LOADED)
    if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
      enable_language(CUDA)
    else()
      include(CheckLanguage)
      check_language(CUDA)
      if(CMAKE_CUDA_COMPILER)
        message(SEND_ERROR "CUDA compiler/linker are required when compiling with CUDA+VecGeom. "
          "Enable CUDA language support in your CMake project.")
      else()
        message(SEND_ERROR "CUDA compiler/linker are required when compiling with CUDA+VecGeom. "
          "Couldn't find the nvcc compiler. Make sure the CUDA toolchain is installed "
          "and enable CUDA language support in your CMake project.")
      endif()
    endif()
  endif()
elseif(CELERITAS_USE_HIP)
  find_dependency(hip REQUIRED QUIET)
endif()

if(CELERITAS_USE_Geant4)
  # FIXME: needed for Geant4 11.1+ to avoid causing errors in VecGeom's
  # FindXercesC
  find_dependency(XercesC)
  # Geant4 calls `include_directories` for CLHEP :( which is not what we want!
  # Save and restore include directories around the call -- even though as a
  # standalone project Celeritas will never have directory-level includes
  get_directory_property(_include_dirs INCLUDE_DIRECTORIES)
  find_dependency(Geant4 @Geant4_VERSION@ REQUIRED)
  set_directory_properties(PROPERTIES INCLUDE_DIRECTORIES "${_include_dirs}")
endif()

if(CELERITAS_USE_HepMC3)
  find_dependency(HepMC3 @HepMC3_VERSION@ REQUIRED)
endif()

find_dependency(nlohmann_json @nlohmann_json_VERSION@ REQUIRED)

if(CELERITAS_USE_MPI)
  find_dependency(MPI REQUIRED)
endif()

if(CELERITAS_USE_OpenMP)
  find_dependency(OpenMP REQUIRED)
endif()

if(CELERITAS_USE_Python)
  set(_components Interpreter)
  set(_version 3.6)
  if(CELERITAS_USE_SWIG)
    list(APPEND _components Development)
    set(_version @Python_VERSION@)
  endif()
  find_dependency(Python ${_version} REQUIRED COMPONENTS ${_components})
  unset(_components)
  unset(_version)
endif()

if(CELERITAS_USE_ROOT)
  find_dependency(ROOT @ROOT_VERSION@ REQUIRED)
endif()

if(CELERITAS_USE_VecGeom)
  find_dependency(VecGeom @VecGeom_VERSION@ REQUIRED)

  if(CELERITAS_USE_CUDA AND NOT VecGeom_CUDA_FOUND)
    message(SEND_ERROR "CUDA mismatch between the VecGeom installation "
      "at ${VECGEOM_INSTALL_DIR} (VecGeom_CUDA_FOUND=${VecGeom_CUDA_FOUND}) "
      "and Celeritas (CELERITAS_USE_CUDA=${CELERITAS_USE_CUDA})"
    )
  endif()
endif()

if(CELERITAS_BUILD_TESTS)
  if(CMAKE_VERSION VERSION_LESS 3.20)
    # First look for standard CMake installation
    # (automatically done for CMake >= 3.20)
    find_dependency(GTest @GTest_VERSION@ QUIET NO_MODULE)
  endif()
  if(NOT GTest_FOUND)
    # If not found, try again
    find_dependency(GTest)
  endif()
endif()

#-----------------------------------------------------------------------------#
# Targets
#-----------------------------------------------------------------------------#

if(NOT TARGET celeritas)
  include("${CELERITAS_CMAKE_DIR}/CeleritasTargets.cmake")
endif()

#-----------------------------------------------------------------------------#

foreach(_dep
    CUDA HIP # Languages
    Geant4 HepMC3 JSON MPI OpenMP ROOT VecGeom SWIG # Packages
  )
  set(@PROJECT_NAME@_${_dep}_FOUND ${CELERITAS_USE_${_dep}})
endforeach()
unset(_dep)

#-----------------------------------------------------------------------------#
