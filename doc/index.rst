.. Copyright 2022-2024 UT-Battelle, LLC, and other Celeritas developers.
.. See the doc/COPYRIGHT file for details.
.. SPDX-License-Identifier: CC-BY-4.0

.. only:: noconfig

   .. warning::

      This autogenerated documentation is incomplete because it was not built
      with all optional dependencies (breathe, sphinxbib, cmake). Please visit
      the `Celeritas documentation`_ hosted on GitHub pages for the full
      documentation.

      .. _Celeritas documentation: https://celeritas-project.github.io/celeritas/user/index.html

=========
Celeritas
=========

.. ***************************************************************************
.. MAIN MATTER
.. ***************************************************************************

.. raw:: latex

   \begin{abstract}

Celeritas is a Monte Carlo particle transport code for simulating High Energy
Physics detectors on general purpose GPUs. Motivated by the massive
computational requirements of the High Luminosity upgrade to the Large Hadron
Collider, the code's initial goal is to accelerate electromagnetic physics
simulations of the CMS and ATLAS detectors.

.. raw:: latex

   \end{abstract}

.. only:: html

   :Release: |release|
   :Date: |today|

.. ***************************************************************************

.. _introduction:

************
Introduction
************

New projects in High Energy Physics (HEP) and upgrades to existing ones promise
new discoveries but at the cost of increased hardware complexity and data
readout rates. Deducing new physics from detector readouts requires a
proportional increase in computational resources. The High Luminosity Large
Hadron Collider (HL-LHC) detectors will require more computational resources
than are available with traditional CPU-based computing grids. For example, the
CMS collaboration forecasts :cite:`2021-CMS-Offline` that when the upgrade is
brought online, computational resource requirements will exceed availability by
more than a factor of two, about 40% of which is Monte Carlo (MC) detector
simulation, without substantial research and development improvements.

Celeritas [#celeritas_vers]_ is a new MC particle transport code designed for
high performance simulation of complex HEP detectors on GPU-accelerated
hardware.  Its immediate goal is to simulate electromagnetic (EM) physics for
LHC-HL detectors with no loss in fidelity, acting as a plugin to accelerate
existing Geant4 :cite:`Geant4` workflows by "offloading" selected particles to
Celeritas to transport on GPU.

.. [#celeritas_vers] This documentation is generated from Celeritas |release|.

Overview
========

This user manual is written for three audiences with different goals: Geant4
toolkit users for integrating Celeritas as a plugin, advanced users for
extending Celeritas with new physics, and developers for maintaining and
advancing the codebase.

Installation and usage
----------------------

The :ref:`infrastructure` section describes how to obtain and set up a working
copy of Celeritas. Once installed, :ref:`Celeritas can be used
<infrastructure>` as a software library for integrating directly into
experiment frameworks and user applications, or its front end applications can
be used to evaluate performance benchmarks and perform some simple analyses.

GPU usage
---------

Celeritas automatically copies data to device when constructing objects as long
as the GPU is enabled. See :ref:`api_system` for details on initializing and
accessing the device.

Geometry
--------

Celeritas has two choices of geometry implementation. VecGeom_ is a
CUDA-compatible library for navigation on Geant4 detector geometries.
:ref:`api_orange` is a work in progress for surface-based geometry navigation
that is "platform portable", i.e. able to run on GPUs from multiple vendors.

Celeritas wraps both geometry packages with a uniform interface for changing
and querying the geometry state.

.. _VecGeom: https://gitlab.cern.ch/VecGeom/VecGeom

Units
-----

The Celeritas default unit system is Gaussian CGS_, but it can be
:ref:`configured <configuration>` to use SI or CLHEP unit systems as well. A
compile-time metadata class allows simultaneous use of macroscopic-scale units
and atomic-scale values such as MeV. For more details, see the
:ref:`units_constants` section of the API documentation.

.. _CGS: https://en.wikipedia.org/wiki/Gaussian_units

EM Physics
----------

Celeritas implements physics processes and models for transporting electron,
positron, and gamma particles. Initial support is being added for muon EM
physics.  Implementation details of these models and their corresponding Geant4
classes are documented in :ref:`api_em_physics`.

Optical Physics
---------------

Optical physics are being added to Celeritas to support various high energy
physics and nuclear physics experiments including LZ, Calvision, DUNE, and
ePIC. See the :ref:`api_optical_physics` section of the implementation details.

Stepping loop
-------------

In Celeritas, the core algorithm is a loop interchange between particle
tracks and steps. Traditionally,
in a CPU-based simulation, the outer loop iterates over particle tracks, while
the inner loop handles steps. Each step includes actions such as evaluating cross sections,
calculating distances to geometry boundaries, and managing interactions that
produce secondaries.

Celeritas vectorizes this process by reversing the loop structure on the GPU.
The outer loop is over *step iterations*, and the inner loop processes *track
slots*, which are elements in a fixed-size vector of active tracks. The
stepping loop in Celeritas is thus a sorted loop over *actions*, with each
action typically corresponding to a kernel launch on the GPU (or an inner loop
over tracks when running on the CPU).

See :ref:`api_stepping` for implementation details on the ordering of actions
and the status of a track slot during iteration.

.. toctree::
   :maxdepth: 2
   :caption: Getting started

   introduction/installation.rst
   introduction/usage.rst

.. ***************************************************************************

.. _api:

***********
Library API
***********

.. only:: nobreathe

   .. note:: The breathe_ extension was not used when building this version of
      the documentation. The API documentation will not be rendered below.

   .. _breathe: https://github.com/michaeljones/breathe#readme

The bulk of Celeritas' code is in several code libraries to be used by external
users and application developers.  Currently, the most stable and user-ready
component of Celeritas is its :ref:`api_g4_interface` for offloading. This
section has two audiences:

- high-level developers, particularly those who might want to write a new
  physics code; and
- external users of Celeritas as a library for integration into a Geant4
  application.

Cursory documentation for many of the classes and other data constructs are
described in this user manual, but further details for developers can be found
in the full Doxygen-generated `developer documentation`_.

.. _developer documentation: https://celeritas-project.github.io/celeritas/dev/index.html

The Celeritas codebase lives under the ``src/`` directory and is partitioned
into several libraries of increasing complexity:
``corecel`` for GPU/CPU abstractions,
``geocel`` for geometry interfaces and wrappers to external libraries,
``orange`` for the ORANGE platform-portable geometry implementation,
``celeritas`` for the GPU implementation of physics and MC particle tracking,
and
``accel`` for the Geant4 integration library.

Additional top-level files provide access to version and
configuration attributes.

.. note::
   When building Celeritas, regardless of the configured :ref:`dependencies
   <Dependencies>`, all of the documented API code in ``corecel``, ``orange``,
   and ``celeritas`` (except possibly headers ending in ``.json.hh``,
   ``.device.hh``, etc.) will compile and can link to downstream code. However,
   some classes will throw ``celeritas::RuntimeError`` if they lack the required
   functionality.

   If Geant4 is disabled, the ``accel`` library will not be built or installed,
   because every component of that library requires Geant4.

.. toctree::
   :maxdepth: 2
   :caption: Implementation details

   implementation/corecel.rst
   implementation/data-model.rst
   implementation/orange.rst
   implementation/units-constants.rst
   implementation/core-physics.rst
   implementation/em-physics.rst
   implementation/optical-physics.rst
   implementation/geant4-interface.rst

.. ***************************************************************************

.. _examples:

********
Examples
********

A few standalone codes demonstrate how to use Celeritas in an independent and
Geant4-integrated context.

.. toctree::
   :maxdepth: 2
   :caption: Examples

   examples/minimal.rst
   examples/geant4.rst

.. ***************************************************************************

.. toctree::
   :maxdepth: 2

   backmatter/acknowledgments.rst
   backmatter/references.rst

.. ***************************************************************************
.. APPENDICES
.. ***************************************************************************

----

.. raw:: latex

   \appendix

.. toctree::
   :maxdepth: 2
   :caption: Appendices

   appendix/release-history.rst
   appendix/development.rst
   appendix/administration.rst
   appendix/license.rst
