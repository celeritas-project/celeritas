//----------------------------------*-C++-*----------------------------------//
// Copyright 2023 UT-Battelle, LLC, and other Celeritas developers.
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: (Apache-2.0 OR MIT)
//---------------------------------------------------------------------------//
//! \file accel/detail/RootOffloadReader.hh
//---------------------------------------------------------------------------//
#pragma once

#include <string>

#include "corecel/Macros.hh"
#include "celeritas/ext/RootUniquePtr.hh"
#include "celeritas/phys/Primary.hh"

// ROOT forward declaration
class TFile;
class TTree;

namespace celeritas
{
class ParticleParams;

//---------------------------------------------------------------------------//
namespace detail
{
//---------------------------------------------------------------------------//
/*!
 * Read ROOT file generated by \c RootOffloadWriter .
 *
 * Use \c operator() to read new primaries:
 * \code
    RootOffloadReader read("primaries.root", particle_params);
    auto event = read();
    while (!event.empty())
    {
        event.read();
    }
 * \endcode
 */
class RootOffloadReader
{
  public:
    //!@{
    //! \name Type aliases
    using SPConstParticles = std::shared_ptr<ParticleParams const>;
    using result_type = std::vector<Primary>;
    //!@}

    // Construct with ROOT filename
    explicit RootOffloadReader(std::string const& filename,
                               SPConstParticles params);

    // Read a single event from the ROOT file
    result_type operator()();

  private:
    //// DATA ////

    SPConstParticles params_;
    std::size_t entry_count_{0};  // Current TTree entry
    std::size_t num_entries_;  // Total number of entries in the TTree
    UPExtern<TFile> tfile_;
    UPExtern<TTree> ttree_;
    std::mutex read_mutex_;

    //// HELPER FUNCTIONS ////

    // Hardcoded ROOT TTree name defined by RootOffloadWriter
    char const* tree_name() { return "primaries"; }

    // Fetch basic data types from leaves
    template<class T>
    auto from_leaf(char const* leaf_name) -> T;

    // Fetch arrays from leaves
    Real3 from_array_leaf(char const* leaf_name);
};

//---------------------------------------------------------------------------//
#if !CELERITAS_USE_ROOT
inline RootOffloadReader::RootOffloadReader(std::string const&)
{
    (void)sizeof(num_entries_);
    (void)sizeof(entry_count_);
    (void)sizeof(tfile_);
    (void)sizeof(ttree_);
    (void)sizeof(read_mutex_);
    (void)sizeof(event_);
    CELER_NOT_CONFIGURED("ROOT");
}

inline RootOffloadReader::result_type RootOffloadReader::operator()()
{
    CELER_ASSERT_UNREACHABLE();
}

inline template<class T>
auto RootOffloadReader::from_leaf(char const*) -> T
{
    CELER_ASSERT_UNREACHABLE();
}

Real3 RootOffloadReader::from_leaf(char const*)
{
    CELER_ASSERT_UNREACHABLE();
}
#endif

//---------------------------------------------------------------------------//
}  // namespace detail
}  // namespace celeritas