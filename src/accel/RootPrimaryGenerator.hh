//----------------------------------*-C++-*----------------------------------//
// Copyright 2024 UT-Battelle, LLC, and other Celeritas developers.
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: (Apache-2.0 OR MIT)
//---------------------------------------------------------------------------//
//! \file accel/RootPrimaryGenerator.hh
//---------------------------------------------------------------------------//
#pragma once

#include <memory>
#include <random>
#include <string>
#include <G4VPrimaryGenerator.hh>

#include "celeritas_config.h"
#include "corecel/Assert.hh"
#include "corecel/Macros.hh"
#include "corecel/cont/Array.hh"
#include "celeritas/ext/RootUniquePtr.hh"

// Forward declare ROOT
class TFile;
class TTree;
class TLeaf;

namespace celeritas
{
//---------------------------------------------------------------------------//
/*!
 * ROOT reader singleton class shared across threads.
 *
 * Read a ROOT file with offloaded primary data generated by
 * \c RootEventWriter .
 *
 * This class is meant to sample data from an offloaded ROOT file. If it needs
 * to be read on an event-by-event basis, use \c RootEventReader .
 */
class RootPrimaryGenerator final : public G4VPrimaryGenerator
{
  public:
    //!@{
    //! \name Type aliases
    using PrimaryGeneratorEngine = std::mt19937;
    using size_type = std::size_t;
    //!@}

  public:
    // Construct with defaults
    RootPrimaryGenerator(std::string offloaded_filename,
                         size_type num_events,
                         size_type primaries_per_event);

    CELER_DELETE_COPY_MOVE(RootPrimaryGenerator);

    //! Add primaries to Geant4 event
    void GeneratePrimaryVertex(G4Event* g4_event) final;

    //! Get total number of events
    int NumEvents() { return static_cast<int>(num_events_); }

  private:
    size_type num_events_{0};  // Total number of events
    size_type primaries_per_event_{0};  // Primaries to be sampled per event
    UPExtern<TFile> root_input_;
    UPExtern<TTree> primaries_tree_;
    PrimaryGeneratorEngine rng_;
    std::uniform_int_distribution<> entry_selector_;
    size_type seed_{0};
    std::mutex read_mutex_;

    // Convert from leaf to a Celeritas Array
    Array<real_type, 3> to_array(TLeaf const& leaf);
};

//---------------------------------------------------------------------------//
}  // namespace celeritas
