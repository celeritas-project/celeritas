//----------------------------------*-C++-*----------------------------------//
// Copyright 2023 UT-Battelle, LLC, and other Celeritas developers.
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: (Apache-2.0 OR MIT)
//---------------------------------------------------------------------------//
//! \file accel/HepMC3RootReader.hh
//---------------------------------------------------------------------------//
#pragma once

#include <string>

#include "corecel/Macros.hh"
#include "celeritas/ext/RootUniquePtr.hh"
#include "accel/HepMC3RootPrimary.hh"

// ROOT forward declaration
class TFile;
class TTree;

namespace celeritas
{
//---------------------------------------------------------------------------//
/*!
 * Read ROOT file generated by \c HepMC3RootWriter .
 *
 * Use \c operator() to read new primaries:
 * \code
    HepMC3RootReader read("primaries.root");
    for (auto i : range(read.num_primaries()))
    {
        auto const primary = read();
    }
 * \endcode
 */
class HepMC3RootReader
{
  public:
    // Construct with ROOT filename
    explicit HepMC3RootReader(std::string const& filename);

    // Read a single primary from the ROOT file
    HepMC3RootPrimary operator()();

    // Get total number of primaries
    std::size_t num_primaries() { return num_entries_; }

  private:
    std::size_t entry_count_{0};  // Current TTree entry
    std::size_t num_entries_;  // Total number of entries in the TTree
    UPExtern<TFile> tfile_;
    UPExtern<TTree> ttree_;
    std::mutex read_mutex_;

  private:
    // Hardcoded ROOT TTree name defined by HepMC3RootWriter
    char const* tree_name() { return "primaries"; }

    // Helper function to fetch array from TLeaf
    std::array<double, 3> from_leaf(char const* leaf_name);
};

//---------------------------------------------------------------------------//
#if !CELERITAS_USE_ROOT
inline HepMC3RootReader::HepMC3RootReader(std::string const&)
{
    (void)sizeof(num_entries_);
    (void)sizeof(entry_count_);
    (void)sizeof(tfile_);
    (void)sizeof(ttree_);
    (void)sizeof(read_mutex_);
    (void)sizeof(event_);
    CELER_NOT_CONFIGURED("ROOT");
}

inline HepMC3RootEvent HepMC3RootReader::operator()()
{
    CELER_NOT_CONFIGURED("ROOT");
}

std::size_t num_primaries()
{
    CELER_NOT_CONFIGURED("ROOT");
}
#endif

//---------------------------------------------------------------------------//
}  // namespace celeritas
