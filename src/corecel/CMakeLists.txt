#----------------------------------*-CMake-*----------------------------------#
# Copyright 2022-2024 UT-Battelle, LLC, and other Celeritas developers.
# See the top-level COPYRIGHT file for details.
# SPDX-License-Identifier: (Apache-2.0 OR MIT)
#-----------------------------------------------------------------------------#

set(SOURCES)
set(PRIVATE_DEPS nlohmann_json::nlohmann_json)
set(PUBLIC_DEPS)

#----------------------------------------------------------------------------#
# Configure Files
#----------------------------------------------------------------------------#
# Celeritas version

celeritas_version_to_hex(CELERITAS_VERSION PROJECT_VERSION)

#----------------------------------------------------------------------------#
# Build configuration

set(CELERITAS_USE_GEANT4  ${CELERITAS_USE_Geant4})
set(CELERITAS_USE_HEPMC3  ${CELERITAS_USE_HepMC3})
set(CELERITAS_USE_OPENMP  ${CELERITAS_USE_OpenMP})
set(CELERITAS_USE_VECGEOM ${CELERITAS_USE_VecGeom})
set(CELERITAS_USE_PERFETTO ${CELERITAS_USE_Perfetto})

# Set CELERITAS_CORE_RNG_CONFIG to a numeric table of RNG options and the
# selection.
# Start counter from 1 because undefined config have the implicit value of 0 in
# the C preprocessor, so any unavailable options (e.g. CELERITAS_USE_CURAND
# when HIP is in use) will implicitly be zero.
celeritas_generate_option_config(CELERITAS_CORE_GEO)
celeritas_generate_option_config(CELERITAS_CORE_RNG)
celeritas_generate_option_config(CELERITAS_OPENMP)
celeritas_generate_option_config(CELERITAS_REAL_TYPE)
celeritas_generate_option_config(CELERITAS_UNITS)

#----------------------------------------------------------------------------#
# Detailed build configuration for reproducibility/provenance

# Get host system information
if(NOT DEFINED CELERITAS_HOSTNAME)
  set(_hostname "$ENV{LMOD_SYSTEM_NAME}")
  if(NOT _hostname)
    cmake_host_system_information(RESULT _hostname QUERY HOSTNAME)
    string(REGEX REPLACE "\\..*" "" _hostname "${_hostname}")
  endif()
  set(CELERITAS_HOSTNAME "${_hostname}" CACHE INTERNAL
    "Build/deploy system name")
endif()

# Save CMake variables as strings
set(CELERITAS_CMAKE_STRINGS)
set(CELERITAS_BUILD_TYPE ${CMAKE_BUILD_TYPE})
foreach(_var BUILD_TYPE HOSTNAME REAL_TYPE UNITS OPENMP CORE_GEO CORE_RNG)
  set(_var "CELERITAS_${_var}")
  string(TOLOWER "${_var}" _lower)
  string(APPEND CELERITAS_CMAKE_STRINGS
    "inline constexpr char ${_lower}[] = \"${${_var}}\";\n"
  )
endforeach()

# Save dependency versions as strings
foreach(_var CLHEP_VERSION Geant4_VERSION VecGeom_VERSION)
  string(TOLOWER "${_var}" _lower)
  if(DEFINED ${_var}_STRING)
    set(_var "${_var}_STRING")
  endif()
  set(_value "${${_var}}")
  string(APPEND CELERITAS_CMAKE_STRINGS
    "inline constexpr char celeritas_${_lower}[] = \"${_value}\";\n"
  )
endforeach()

# NOTE: some values are defined in top-level CMakeLists
# - CELERITAS_HAVE_ROCTX
# - CELERITAS_SINCOSPI_PREFIX

if(DEFINED CELERITAS_SINCOSPI_PREFIX)
  set(CELERITAS_SINCOSPI_PREFIX_DEF
    "#define CELERITAS_SINCOSPI_PREFIX ${CELERITAS_SINCOSPI_PREFIX}"
  )
endif()

# Save dependency versions as hex
set(CELERITAS_DEPENDENCY_VERSIONS)
foreach(_dep Geant4 VecGeom HepMC3)
  string(TOUPPER "${_dep}" _upper)
  celeritas_version_to_hex(_temp_version_hex ${_dep}_VERSION)
  list(APPEND CELERITAS_DEPENDENCY_VERSIONS
    "#define CELERITAS_${_upper}_VERSION ${_temp_version_hex}"
  )
endforeach()
string(JOIN "\n" CELERITAS_DEPENDENCY_VERSIONS ${CELERITAS_DEPENDENCY_VERSIONS})

#-----------------------------------------------------------------------------#

celeritas_configure_file("Version.hh.in" "corecel/Version.hh" @ONLY)
celeritas_configure_file("Config.hh.in" "corecel/Config.hh" @ONLY)

#-----------------------------------------------------------------------------#
# Main code
#-----------------------------------------------------------------------------#

list(APPEND SOURCES
  Assert.cc
  AssertIO.json.cc
  Types.cc
  data/Copier.cc
  data/DeviceAllocation.cc
  data/PinnedAllocator.cc
  data/AuxInterface.cc
  data/AuxParamsRegistry.cc
  data/AuxStateVec.cc
  grid/VectorUtils.cc
  io/BuildOutput.cc
  io/ColorUtils.cc
  io/ExceptionOutput.cc
  io/JsonUtils.json.cc
  io/Label.cc
  io/LogContextException.cc
  io/Logger.cc
  io/LoggerTypes.cc
  io/OutputInterface.cc
  io/OutputRegistry.cc
  io/ScopedStreamRedirect.cc
  io/ScopedTimeAndRedirect.cc
  io/StringUtils.cc
  io/detail/EnumStringMapperImpl.cc
  io/detail/LoggerMessage.cc
  io/detail/ReprImpl.cc
  sys/ActionInterface.cc
  sys/ActionRegistry.cc
  sys/ActionRegistryOutput.cc
  sys/Device.cc
  sys/DeviceIO.json.cc
  sys/Environment.cc
  sys/KernelRegistry.cc
  sys/KernelRegistryIO.json.cc
  sys/MemRegistry.cc
  sys/MemRegistryIO.json.cc
  sys/MpiCommunicator.cc
  sys/MultiExceptionHandler.cc
  sys/ScopedMem.cc
  sys/ScopedMpiInit.cc
  sys/ScopedProfiling.cc
  sys/ScopedSignalHandler.cc
  sys/Stream.cc
  sys/TypeDemangler.cc
  sys/Version.cc
)

#-----------------------------------------------------------------------------#
# Configuration-dependent code/dependencies
#-----------------------------------------------------------------------------#

list(APPEND PRIVATE_DEPS Celeritas::DeviceToolkit)

if(CELERITAS_USE_CUDA OR CELERITAS_USE_HIP)
  list(APPEND SOURCES
    data/detail/Filler.cu
    sys/KernelParamCalculator.device.cc
  )
endif()
if(CELERITAS_USE_CUDA)
  # we currently depend on CUDA install including the nvtx header
  list(APPEND SOURCES
    sys/ScopedLimitSaver.cuda.cc
    sys/ScopedProfiling.cuda.cc
  )
endif()

if(CELERITAS_USE_HIP)
  list(APPEND SOURCES
    sys/ScopedProfiling.hip.cc
  )
endif()

if(CELERITAS_USE_MPI)
  list(APPEND PUBLIC_DEPS MPI::MPI_CXX)
endif()

if(CELERITAS_USE_OpenMP)
  list(APPEND PRIVATE_DEPS OpenMP::OpenMP_CXX)
endif()

if(CELERITAS_USE_Perfetto)
  list(APPEND PRIVATE_DEPS Celeritas::Perfetto)
  list(APPEND SOURCES
    sys/Counter.perfetto.cc
    sys/TracingSession.cc
  )
endif()

#-----------------------------------------------------------------------------#
# Create library
#-----------------------------------------------------------------------------#

celeritas_add_library(corecel ${SOURCES})

# Require at least C++17
target_compile_features(corecel PUBLIC cxx_std_17)
if(CELERITAS_USE_CUDA)
  target_compile_features(corecel PUBLIC cuda_std_17)
endif()
if(WIN32)
  target_compile_definitions(corecel PUBLIC
    $<$<COMPILE_LANGUAGE:CXX>:NOMINMAX NOGDI>
  )

  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # __cplusplus: use standard-compliant C++ version macro
    # preprocessor: use standard-compliant preprocessor
    # EHsc: enable standard C++ exception handling
    target_compile_options(corecel PUBLIC
      $<$<COMPILE_LANGUAGE:CXX>:/Zc:__cplusplus /Zc:preprocessor /EHsc>
    )
  endif()
endif()


celeritas_target_include_directories(corecel
  PUBLIC
    "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src>"
    "$<BUILD_INTERFACE:${CELERITAS_HEADER_CONFIG_DIRECTORY}>"
    "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"
)
celeritas_target_link_libraries(corecel
  PRIVATE ${PRIVATE_DEPS}
  PUBLIC ${PUBLIC_DEPS}
)

#-----------------------------------------------------------------------------#
