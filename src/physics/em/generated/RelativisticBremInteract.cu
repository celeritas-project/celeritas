//---------------------------------*-CUDA-*----------------------------------//
// Copyright 2021-2022 UT-Battelle, LLC, and other Celeritas developers.
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: (Apache-2.0 OR MIT)
//---------------------------------------------------------------------------//
//! \file physics/em/generated/RelativisticBremInteract.cu
//! \note Auto-generated by gen-interactor.py: DO NOT MODIFY!
//---------------------------------------------------------------------------//
#include "base/device_runtime_api.h"
#include "base/Assert.hh"
#include "base/KernelParamCalculator.device.hh"
#include "comm/Device.hh"
#include "../detail/RelativisticBremLauncher.hh"

namespace celeritas
{
namespace generated
{
namespace
{
__global__ void relativistic_brem_interact_kernel(
    const celeritas::detail::RelativisticBremDeviceRef model_data,
    const CoreRef<MemSpace::device> core_data)
{
    auto tid = KernelParamCalculator::thread_id();
    if (!(tid < core_data.states.size()))
        return;

    auto launch = make_interaction_launcher(
        core_data,
        model_data,
        celeritas::detail::relativistic_brem_interact_track);
    launch(tid);
}
} // namespace

void relativistic_brem_interact(
    const celeritas::detail::RelativisticBremDeviceRef& model_data,
    const CoreRef<MemSpace::device>& core_data)
{
    CELER_EXPECT(core_data);
    CELER_EXPECT(model_data);

    CELER_LAUNCH_KERNEL(relativistic_brem_interact,
                        celeritas::device().default_block_size(),
                        model.states.size(),
                        core_data, model_data);
}

} // namespace generated
} // namespace celeritas
