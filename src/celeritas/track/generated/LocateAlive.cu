//---------------------------------*-CUDA-*----------------------------------//
// Copyright 2022 UT-Battelle, LLC, and other Celeritas developers.
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: (Apache-2.0 OR MIT)
//---------------------------------------------------------------------------//
//! \file celeritas/track/generated/LocateAlive.cu
//! \note Auto-generated by gen-trackinit.py: DO NOT MODIFY!
//---------------------------------------------------------------------------//
#include "celeritas/track/detail/LocateAliveLauncher.hh"
#include "corecel/device_runtime_api.h"
#include "corecel/sys/KernelParamCalculator.device.hh"
#include "corecel/sys/Device.hh"
#include "corecel/Types.hh"

namespace celeritas
{
namespace generated
{
namespace
{
__global__ void
#if CELERITAS_LAUNCH_BOUNDS
#if CELERITAS_USE_CUDA && (__CUDA_ARCH__ == 700) // Tesla V100-SXM2-16GB
__launch_bounds__(1024, 8)
#endif
#if CELERITAS_USE_HIP && defined(__gfx90a__)
__launch_bounds__(1024, 8)
#endif
#endif // CELERITAS_LAUNCH_BOUNDS
locate_alive_kernel(
    CoreDeviceRef const core_data)
{
    auto tid = KernelParamCalculator::thread_id();
    if (!(tid < core_data.states.size()))
        return;

    detail::LocateAliveLauncher<MemSpace::device> launch(core_data);
    launch(tid);
}
}  // namespace

void locate_alive(
    CoreDeviceRef const& core_data)
{
    CELER_LAUNCH_KERNEL(
        locate_alive,
        celeritas::device().default_block_size(),
        core_data.states.size(),
        core_data);
}

}  // namespace generated
}  // namespace celeritas
