//----------------------------------*-C++-*----------------------------------//
// Copyright 2022-2023 UT-Battelle, LLC, and other Celeritas developers.
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: (Apache-2.0 OR MIT)
//---------------------------------------------------------------------------//
//! \file celeritas/track/generated/ProcessSecondaries.cc
//! \note Auto-generated by gen-trackinit.py: DO NOT MODIFY!
//---------------------------------------------------------------------------//
#include <utility>

#include "corecel/sys/MultiExceptionHandler.hh"
#include "corecel/sys/ThreadId.hh"
#include "corecel/Types.hh"
#include "celeritas/global/KernelContextException.hh"
#include "celeritas/track/detail/ProcessSecondariesLauncher.hh" // IWYU pragma: associated

namespace celeritas
{
namespace generated
{
void process_secondaries(
    CoreHostRef const& core_data)
{
    MultiExceptionHandler capture_exception;
    detail::ProcessSecondariesLauncher<MemSpace::host> launch(core_data);
    #pragma omp parallel for
    for (ThreadId::size_type i = 0; i < core_data.states.size(); ++i)
    {
        CELER_TRY_HANDLE_CONTEXT(
            launch(ThreadId{i}),
            capture_exception,
            KernelContextException(core_data, ThreadId{i}, "process_secondaries"));
    }
    log_and_rethrow(std::move(capture_exception));
}

}  // namespace generated
}  // namespace celeritas
