//----------------------------------*-C++-*----------------------------------//
// Copyright 2024 UT-Battelle, LLC, and other Celeritas developers.
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: (Apache-2.0 OR MIT)
//---------------------------------------------------------------------------//
//! \file celeritas/phys/RootPrimaryGenerator.hh
//---------------------------------------------------------------------------//
#pragma once

#include <memory>
#include <random>
#include <string>

#include "corecel/Assert.hh"
#include "geocel/Types.hh"
#include "celeritas/Types.hh"
#include "celeritas/ext/RootUniquePtr.hh"
#include "celeritas/io/EventIOInterface.hh"

// Forward declare ROOT
class TFile;
class TTree;
class TLeaf;

namespace celeritas
{
class ParticleParams;

//---------------------------------------------------------------------------//
/*!
 * Generate a vector of primaries by reading a ROOT file with offloaded
 * primaries data generated by \c RootEventWriter .
 *
 * This class is meant to simply sample primaries from an offloaded ROOT file.
 * If it needs to be read on an event-by-event basis, use \c RootEventReader .
 */
class RootPrimaryGenerator : public EventReaderInterface
{
  public:
    //!@{
    //! \name Type aliases
    using SPConstParticles = std::shared_ptr<ParticleParams const>;
    using result_type = std::vector<Primary>;
    //!@}

  public:
    // Construct with defaults
    RootPrimaryGenerator(std::string const& filename,
                         SPConstParticles params,
                         size_type num_events,
                         size_type primaries_per_event,
                         unsigned int seed);

    //! Prevent copying and moving
    CELER_DELETE_COPY_MOVE(RootPrimaryGenerator);

    //! Sample primaries for a single event
    result_type operator()() final;

    //! Get total number of events
    size_type num_events() const final { return num_events_; }

  private:
    SPConstParticles params_;
    size_type num_events_{0};  // Total number of events
    size_type primaries_per_event_{0};  // Primaries to be sampled per event
    UPExtern<TFile> tfile_;
    UPExtern<TTree> ttree_;
    std::uniform_int_distribution<> entry_selector_;
    std::mt19937 rng_;
    EventId event_count_{0};

    // Convert from leaf to a Celeritas Array
    Real3 from_array_leaf(TLeaf const& leaf);
};

//---------------------------------------------------------------------------//
#if !CELERITAS_USE_ROOT
inline RootPrimaryGenerator::RootPrimaryGenerator(
    std::string const&, SPConstParticles, size_type, size_type, unsigned int)
{
    CELER_DISCARD(params_);
    CELER_DISCARD(num_events_);
    CELER_DISCARD(primaries_per_event_);
    CELER_DISCARD(tfile_);
    CELER_DISCARD(ttree_);
    CELER_DISCARD(entry_selector_);
    CELER_DISCARD(rng_);
    CELER_DISCARD(event_count_);
    CELER_NOT_CONFIGURED("ROOT");
}

inline RootPrimaryGenerator::result_type RootPrimaryGenerator::operator()()
{
    CELER_ASSERT_UNREACHABLE();
}

inline Real3 RootPrimaryGenerator::from_array_leaf(TLeaf const&)
{
    CELER_ASSERT_UNREACHABLE();
}
#endif

//---------------------------------------------------------------------------//
}  // namespace celeritas
