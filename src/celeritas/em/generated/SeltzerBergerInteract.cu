//---------------------------------*-CUDA-*----------------------------------//
// Copyright 2021-2022 UT-Battelle, LLC, and other Celeritas developers.
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: (Apache-2.0 OR MIT)
//---------------------------------------------------------------------------//
//! \file celeritas/em/generated/SeltzerBergerInteract.cu
//! \note Auto-generated by gen-interactor.py: DO NOT MODIFY!
//---------------------------------------------------------------------------//
#include "corecel/device_runtime_api.h"

#include "corecel/Assert.hh"
#include "corecel/Types.hh"
#include "corecel/sys/KernelParamCalculator.device.hh"
#include "corecel/sys/Device.hh"
#include "celeritas/phys/InteractionLauncher.hh"

#include "celeritas/em/launcher/SeltzerBergerLauncher.hh"

namespace celeritas
{
namespace generated
{
namespace
{
__global__ void seltzer_berger_interact_kernel(
    const celeritas::detail::SeltzerBergerDeviceRef model_data,
    const CoreRef<MemSpace::device> core_data)
{
    auto tid = KernelParamCalculator::thread_id();
    if (!(tid < core_data.states.size()))
        return;

    auto launch = make_interaction_launcher(
        core_data,
        model_data,
        celeritas::detail::seltzer_berger_interact_track);
    launch(tid);
}
} // namespace

void seltzer_berger_interact(
    const celeritas::detail::SeltzerBergerDeviceRef& model_data,
    const CoreRef<MemSpace::device>& core_data)
{
    CELER_EXPECT(core_data);
    CELER_EXPECT(model_data);

    CELER_LAUNCH_KERNEL(seltzer_berger_interact,
                        celeritas::device().default_block_size(),
                        core_data.states.size(),
                        model_data, core_data);
}

} // namespace generated
} // namespace celeritas
