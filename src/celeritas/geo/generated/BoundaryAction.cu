//---------------------------------*-CUDA-*----------------------------------//
// Copyright 2022-2023 UT-Battelle, LLC, and other Celeritas developers.
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: (Apache-2.0 OR MIT)
//---------------------------------------------------------------------------//
//! \file celeritas/geo/generated/BoundaryAction.cu
//! \note Auto-generated by gen-action.py: DO NOT MODIFY!
//---------------------------------------------------------------------------//
#include "BoundaryAction.hh"

#include "corecel/device_runtime_api.h"
#include "corecel/Assert.hh"
#include "corecel/Types.hh"
#include "corecel/sys/KernelParamCalculator.device.hh"
#include "corecel/sys/Device.hh"
#include "celeritas/global/CoreParams.hh"
#include "celeritas/global/CoreState.hh"
#include "celeritas/global/KernelLaunchUtils.hh"
#include "celeritas/global/TrackLauncher.hh"
#include "../detail/BoundaryActionImpl.hh"

namespace celeritas
{
namespace generated
{
namespace
{
__global__ void boundary_kernel(
    CRefPtr<CoreParamsData, MemSpace::device> const params,
    RefPtr<CoreStateData, MemSpace::device> const state,
    ThreadId const offset
)
{
    TrackLauncher launch{*params, *state, detail::boundary_track};
    launch(KernelParamCalculator::thread_id() + offset.get());
}
}  // namespace

void BoundaryAction::execute(CoreParams const& params, CoreStateDevice& state) const
{
    KernelLaunchParams kernel_params = compute_launch_params(this->action_id(),
                                                             params,
                                                             state,
                                                             TrackOrder::sort_step_limit_action);
    CELER_LAUNCH_KERNEL(boundary,
                        celeritas::device().default_block_size(),
                        kernel_params.num_threads,
                        params.ptr<MemSpace::native>(),
                        state.ptr(),
                        kernel_params.threads_offset);
}

}  // namespace generated
}  // namespace celeritas
