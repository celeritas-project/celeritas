//---------------------------------*-CUDA-*----------------------------------//
// Copyright 2022 UT-Battelle, LLC, and other Celeritas developers.
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: (Apache-2.0 OR MIT)
//---------------------------------------------------------------------------//
//! \file sim/generated/InitTracks.cu
//! \note Auto-generated by gen-trackinit.py: DO NOT MODIFY!
//---------------------------------------------------------------------------//
#include "sim/detail/InitTracksLauncher.hh"

#include "base/device_runtime_api.h"
#include "base/KernelParamCalculator.device.hh"
#include "comm/Device.hh"

namespace celeritas
{
namespace generated
{
namespace
{
__global__ void
#if CELERITAS_LAUNCH_BOUNDS
#if CELERITAS_USE_CUDA && (__CUDA_ARCH__ == 700) // Tesla V100-SXM2-16GB
__launch_bounds__(256, 6)
#endif
#if CELERITAS_USE_HIP && defined(__gfx90a__)
__launch_bounds__(256, 8)
#endif
#endif // CELERITAS_LAUNCH_BOUNDS
init_tracks_kernel(
    const ParamsDeviceRef params,
    const StateDeviceRef states,
    const TrackInitStateDeviceRef data,
    const size_type num_vacancies)
{
    auto tid = KernelParamCalculator::thread_id();
    if (!(tid < num_vacancies))
        return;

    detail::InitTracksLauncher<MemSpace::device> launch(params, states, data, num_vacancies);
    launch(tid);
}
} // namespace

void init_tracks(
    const ParamsDeviceRef& params,
    const StateDeviceRef& states,
    const TrackInitStateDeviceRef& data,
    const size_type num_vacancies)
{
    CELER_LAUNCH_KERNEL(
        init_tracks,
        celeritas::device().default_block_size(),
        num_vacancies,
        params, states, data, num_vacancies);
}

} // namespace generated
} // namespace celeritas
