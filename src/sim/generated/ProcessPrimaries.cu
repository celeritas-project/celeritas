//---------------------------------*-CUDA-*----------------------------------//
// Copyright 2022 UT-Battelle, LLC, and other Celeritas developers.
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: (Apache-2.0 OR MIT)
//---------------------------------------------------------------------------//
//! \file sim/generated/ProcessPrimaries.cu
//! \note Auto-generated by gen-trackinit.py: DO NOT MODIFY!
//---------------------------------------------------------------------------//
#include "sim/detail/ProcessPrimariesLauncher.hh"

#include "base/device_runtime_api.h"
#include "base/KernelParamCalculator.device.hh"
#include "comm/Device.hh"

namespace celeritas
{
namespace generated
{
namespace
{
__global__ void process_primaries_kernel(
    const Span<const Primary> primaries,
    const TrackInitStateDeviceRef data)
{
    auto tid = KernelParamCalculator::thread_id();
    if (!(tid < primaries.size()))
        return;

    detail::ProcessPrimariesLauncher<MemSpace::device> launch(primaries, data);
    launch(tid);
}
} // namespace

void process_primaries(
    const Span<const Primary> primaries,
    const TrackInitStateDeviceRef& data)
{
    CELER_LAUNCH_KERNEL(
        process_primaries,
        celeritas::device().default_block_size(),
        primaries.size(),
        primaries, data);
}

} // namespace generated
} // namespace celeritas
