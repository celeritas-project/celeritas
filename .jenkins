pipeline {
  options {
    disableConcurrentBuilds(abortPrevious: true)
  }
  triggers {
    issueCommentTrigger('.*do: test')
  }
  agent none
  stages {
    stage('Build') {
      parallel {
        stage('clang-minitest') {
          agent {
            docker {
              image 'celeritas/ci-centos7-rocm5:2022-12-14.2'
              // Note: this image does not require CUDA or HIP
            }
          }
          steps {
            sh 'entrypoint-shell ./scripts/ci/run-ci.sh  centos-rocm minitest'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/*.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
        stage('clang-asan') {
          agent {
            docker {
              image 'celeritas/ci-centos7-rocm5:2022-12-14.2'
            }
          }
          steps {
            sh 'entrypoint-shell ./scripts/ci/run-ci.sh centos-rocm asan'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/*.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
        stage('clang-float') {
          agent {
            docker {
              image 'celeritas/ci-centos7-rocm5:2022-12-14.2'
            }
          }
          steps {
            sh 'entrypoint-shell ./scripts/ci/run-ci.sh centos-rocm float'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/*.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
        stage('hip-ndebug') {
          agent {
            docker {
              image 'celeritas/ci-centos7-rocm5:2022-12-14.2'
              label 'AMD_Radeon_Instinct_MI100 && rocm-docker'
              args '--device=/dev/kfd --device=/dev/dri --security-opt seccomp=unconfined'
            }
          }
          steps {
            sh 'entrypoint-shell ./scripts/ci/run-ci.sh centos-rocm ndebug'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/*.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
        stage('full-novg') {
          agent {
            docker {
              image 'celeritas/ci-jammy-cuda11:2023-03-13'
              label 'NVIDIA_Tesla_V100-PCIE-32GB && nvidia-docker && large_images'
            }
          }
          steps {
            sh 'entrypoint-shell ./scripts/ci/run-ci.sh ubuntu-cuda full-novg'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
        stage('full-novg-ndebug') {
          agent {
            docker {
              image 'celeritas/ci-jammy-cuda11:2023-03-13'
              label 'NVIDIA_Tesla_V100-PCIE-32GB && nvidia-docker && large_images'
            }
          }
          steps {
            sh 'entrypoint-shell ./scripts/ci/run-ci.sh ubuntu-cuda full-novg-ndebug'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
        stage('vecgeom-reldeb') {
          agent {
            docker {
              image 'celeritas/ci-jammy-cuda11:2023-08-02'
              label 'NVIDIA_Tesla_V100-PCIE-32GB && nvidia-docker && large_images'
            }
          }
          steps {
            sh 'entrypoint-shell ./scripts/ci/run-ci.sh ubuntu-cuda vecgeom-reldeb'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
        stage('vecgeom-demos') {
          agent {
            docker {
              image 'celeritas/ci-jammy-cuda11:2023-08-02'
              label 'NVIDIA_Tesla_V100-PCIE-32GB && nvidia-docker && large_images'
            }
          }
          steps {
            sh 'entrypoint-shell ./scripts/ci/run-ci.sh ubuntu-cuda vecgeom-demos'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
        stage('vecgeom-tests') {
          agent {
            docker {
              image 'celeritas/ci-jammy-cuda11:2023-08-02'
              label 'NVIDIA_Tesla_V100-PCIE-32GB && nvidia-docker && large_images'
            }
          }
          steps {
            sh 'entrypoint-shell ./scripts/ci/run-ci.sh ubuntu-cuda vecgeom-tests'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
        stage('clang-geant4') {
          agent {
            docker {
              image 'celeritas/ci-centos7-rocm5:2022-12-14.2'
              // Note: this image does not require CUDA or HIP
            }
          }
          steps {
            sh 'entrypoint-shell ./scripts/ci/run-ci.sh  centos-rocm geant4'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/*.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
      }
    }
  }
}
// vim: set ft=groovy ts=2 sw=2 :
