pipeline {
  triggers {
    issueCommentTrigger('.*do: test')
  }
  agent none
  environment {
    CTEST_ARGS = '--timeout 180 --no-compress-output -T Test --test-output-size-passed=65536 --test-output-size-failed=1048576'
  }
  stages {
    stage('Build') {
      parallel {
        stage('valgrind') {
          agent {
            docker {
              image 'celeritas/ci-bionic-minimal:2021-12-17'
              // Note: this image does not require CUDA
            }
          }
          steps {
            sh 'ln -s scripts/cmake-presets/ci.json CMakeUserPresets.json'
            sh 'SOURCE_DIR=. entrypoint-shell ./scripts/build.sh valgrind'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
        stage('full-novg') {
          agent {
            docker {
              image 'celeritas/ci-focal-cuda11:2021-12-18'
              label 'NVIDIA_Tesla_V100-PCIE-32GB && nvidia-docker'
            }
          }
          steps {
            sh 'ln -s scripts/cmake-presets/ci.json CMakeUserPresets.json'
            sh 'SOURCE_DIR=. entrypoint-shell ./scripts/build.sh full-novg'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
        stage('full-novg-ndebug') {
          agent {
            docker {
              image 'celeritas/ci-focal-cuda11:2021-12-18'
              label 'NVIDIA_Tesla_V100-PCIE-32GB && nvidia-docker'
            }
          }
          steps {
            sh 'ln -s scripts/cmake-presets/ci.json CMakeUserPresets.json'
            sh 'SOURCE_DIR=. entrypoint-shell ./scripts/build.sh full-novg-ndebug'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
        stage('vecgeom-demos') {
          agent {
            docker {
              image 'celeritas/ci-focal-cuda11:2021-12-18'
              label 'NVIDIA_Tesla_V100-PCIE-32GB && nvidia-docker && persistent-tmp'
              args '-v persistent-tmp:/tmp/persistent'
            }
          }
          steps {
            sh 'ln -s scripts/cmake-presets/ci.json CMakeUserPresets.json'
            sh 'SOURCE_DIR=. entrypoint-shell ./scripts/build.sh vecgeom-demos'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
        stage('vecgeom-tests') {
          agent {
            docker {
              image 'celeritas/ci-focal-cuda11:2021-12-18'
              label 'NVIDIA_Tesla_V100-PCIE-32GB && nvidia-docker'
            }
          }
          steps {
            sh 'ln -s scripts/cmake-presets/ci.json CMakeUserPresets.json'
            sh 'SOURCE_DIR=. entrypoint-shell ./scripts/build.sh vecgeom-tests'
          }
          post {
            always {
              xunit reduceLog: false, tools:[CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
            }
          }
        }
      }
    }
  }
}
// vim: set ft=groovy ts=2 sw=2 :
