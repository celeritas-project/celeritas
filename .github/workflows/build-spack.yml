# Build directly on the GitHub runner with caching
name: build-spack
on:
  workflow_dispatch:
  workflow_call:

concurrency:
  group: build-spack-${{github.ref}}-${{github.event.pull_request.number || github.run_number}}-${{github.workflow}}

env:
  SPACK_REF: 5fe93fee1eec46a0750bd340198bffcb92ff9eec # v0.22.0

jobs:
  spack:
    name: >-
      ${{format('{0}{1}{2}{3}{4}',
                matrix.geometry,
                matrix.special && '-' || '',
                matrix.special,
                matrix.geant && '-g4@' || '',
                matrix.geant)}}
    strategy:
      fail-fast: false
      matrix:
        geometry: ["vecgeom"]
        special: [null]
        geant: ["11.0"]
        include:
          - geometry: "vecgeom"
            special: "vgsurf"
            geant: "11.0"
    env:
      CCACHE_DIR: "${{github.workspace}}/.ccache"
      CCACHE_MAXSIZE: "100Mi"
      CMAKE_PRESET: >-
        ${{format('reldeb-{0}{1}{2}',
                  matrix.geometry,
                  matrix.special && '-' || '',
                  matrix.special)}}
      SPACK_VIEW: "/opt/spack-view"
      SPACK_BUILDCACHE: "celer-buildcache" # see spack.yaml
      CC: "clang-15"
      CXX: "clang++-15"
    runs-on: ubuntu-22.04
    continue-on-error: false
    steps:
      - name: Check out Celeritas
        uses: actions/checkout@v4
        with:
          fetch-depth: 383
          fetch-tags: true # to get version information
      - name: Setup Spack
        uses: spack/setup-spack@0ce61628ed8a32a5664cf01a0e0b5a4834a3b413 # 2024/03
        with:
          ref: ${{env.SPACK_REF}}
          buildcache: true
          color: true
          path: spack-src
      - name: Initialize spack environment
        run: |
          # TODO: https://github.com/spack/spack/pull/43136
          curl -LfsS https://github.com/spack/spack/pull/43136.patch | git -C spack-src apply -
          cp scripts/ci/spack.yaml .
          if [ "${{matrix.geometry}}" == "vecgeom" ] && [ "${{matrix.special}}" != "vgsurf" ]; then
            spack -e . add vecgeom
          fi
          if   [ "${{matrix.special}}" != "minimal" ] \
            && [ "${{matrix.special}}" != "asanlite" ] \
            && [ "${{matrix.special}}" != "vgsurf" ] ; then
            spack -e . add root
          fi
          if [ "${{matrix.geant}}" != "" ]; then
            spack -e . add geant4@${{matrix.geant}}
          fi
          spack -e . config add packages:all:require:"'%clang@15 target=x86_64_v3'"
          spack -e . compiler find
          # Add the spack ref so that updating spack will reconcretize
          echo "# Concretized with ${{env.SPACK_REF}}" >> spack.yaml
      - name: Cache concretization
        uses: actions/cache@v4
        with:
          path: spack.lock
          key: lock-${{hashFiles('spack.yaml')}}-${{github.run_id}}
          restore-keys: |
            lock-${{hashFiles('spack.yaml')}}
      - name: Concretize
        run: |
          spack -e . -v concretize
      - name: Install dependencies with Spack
        run: |
          spack -e . env depfile -o Makefile
          make -Orecurse -j $(($(nproc) + 1)) SPACK_INSTALL_FLAGS=--no-check-signature
      - name: Save Spack installation to build cache
        run: |
          spack -e . mirror set --push --oci-username ${{github.actor}} --oci-password "${{secrets.GITHUB_TOKEN}}" ${SPACK_BUILDCACHE}
          spack -e . buildcache push -j $(($(nproc) + 1)) --base-image ubuntu:22.04 --unsigned --update-index ${SPACK_BUILDCACHE}
        if: ${{github.event_name == 'push' && !cancelled()}}
      - name: Activate environment
        run: |
          test -d "${SPACK_VIEW}"
          echo "${SPACK_VIEW}/bin" >> $GITHUB_PATH
          echo "CMAKE_PREFIX_PATH=${SPACK_VIEW}:${CMAKE_PREFIX_PATH}" >> $GITHUB_ENV
          spack env activate . --sh > "${SPACK_VIEW}/rc"
      - name: Restore ccache
        uses: actions/cache/restore@v4
        with:
          path: ${{env.CCACHE_DIR}}
          key: ccache-${{env.CMAKE_PRESET}}-${{matrix.geant}}-${{github.run_id}}
          restore-keys: |
            ccache-${{env.CMAKE_PRESET}}-${{matrix.geant}}
            ccache-${{env.CMAKE_PRESET}}
      - name: Zero ccache stats
        run: |
          ccache -z
      - name: Install VecGeom surface
        if: ${{matrix.geometry == 'vecgeom' && matrix.special == 'vgsurf'}}
        run: |
          . ${SPACK_VIEW}/rc
          git clone -b surface_model --depth=368 \
            https://gitlab.cern.ch/VecGeom/VecGeom.git vecgeom
          cd vecgeom
          mkdir build
          cd build
          export VECGEOM_PREFIX_PATH=$GITHUB_WORKSPACE/vecgeom/install
          cmake \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_STANDARD:STRING=17 \
            -DVECGEOM_BACKEND:STRING=Scalar -DVECGEOM_VECTOR:STRING=empty \
            -DVECGEOM_BUILTIN_VECCORE:BOOL=ON \
            -DVECGEOM_NO_SPECIALIZATION:BOOL=ON \
            -DVECGEOM_USE_SURF:BOOL=ON -DVECGEOM_USE_NAVTUPLE:BOOL=OFF -DVECGEOM_USE_NAVINDEX:BOOL=ON \
            -DBUILD_SHARED_LIBS:BOOL=ON \
            -DVECGEOM_GDML:BOOL=ON -DVECGEOM_ENABLE_CUDA:BOOL=OFF -DVECGEOM_GEANT4:BOOL=OFF -DVECGEOM_ROOT:BOOL=OFF \
            -DBUILD_TESTING:BOOL=OFF \
            -DCMAKE_INSTALL_PREFIX:STRING=$VECGEOM_PREFIX_PATH \
            -G Ninja \
            ..
          ninja install
          echo "CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:${VECGEOM_PREFIX_PATH}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${VECGEOM_PREFIX_PATH}/lib" >> $GITHUB_ENV
      - name: Configure Celeritas
        env:
          CLANG_TIDY: "clang-tidy-15"
        run: |
          ln -fs scripts/cmake-presets/ci-ubuntu-github.json CMakeUserPresets.json
          cmake --preset=${CMAKE_PRESET} --log-level=VERBOSE
      - name: Build all
        id: build
        working-directory: build
        continue-on-error: ${{matrix.special == 'clang-tidy'}}
        run: |
          ninja -v -k0
      - name: Save ccache
        if: ${{always() && steps.build.outcome == 'success'}}
        uses: actions/cache/save@v4
        with:
          path: ${{env.CCACHE_DIR}}
          key: ccache-${{env.CMAKE_PRESET}}-${{matrix.geant}}-${{github.run_id}}
          restore-keys: |
            ccache-${{env.CMAKE_PRESET}}-${{matrix.geant}}
            ccache-${{env.CMAKE_PRESET}}
      - name: Regenerate ROOT test data
        if: ${{
          matrix.geant == '11.0'
          && matrix.special != 'minimal'
          && matrix.special != 'vgsurf'
         }}
        working-directory: build
        run: |
          ninja -v -k0 update-root-test-data
      - name: Run unit tests
        id: unittest
        if: ${{matrix.special != 'clang-tidy'}}
        continue-on-error: ${{fromJSON(matrix.geant || '0') < 11}} # TODO: fix failing tests
        run: |
          if [ "${{matrix.geant}}" == "11.0" ]; then
            # Note this is ignored for geant4, float, clhep
            export CELER_TEST_STRICT=1
          fi
          ctest -LE app --preset=spack-unit
      - name: Run app tests
        id: apptest
        if: ${{!cancelled()
            && matrix.special != 'clang-tidy'
            && steps.build.outcome == 'success'}}
        continue-on-error: ${{matrix.geant == '10.6'}} # TODO: rogue output from G4DeexPrecoParameters
        run: |
          ctest -L app --preset=spack-app
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: >-
          ${{
            always()
            && (steps.unittest.outcome == 'success'
                || steps.unittest.outcome == 'failure')
            && (!matrix.geant || fromJSON(matrix.geant) >= 11)
          }}
        with:
          name: test-results-spack-${{env.CMAKE_PRESET}}-${{matrix.geant}}
          path: "test-output/**/*.xml"
          if-no-files-found: error
          retention-days: 1
      - name: Check using build directory as install
        # TODO: ASAN requires flags downstream
        if: >-
          ${{
            matrix.special != 'asanlite'
          }}
        run: |
          . ${SPACK_VIEW}/rc
          CELER_INSTALL_DIR=${PWD}/build ./scripts/ci/test-examples.sh
      - name: Install
        id: install
        if: ${{!cancelled() && steps.build.outcome == 'success'}}
        working-directory: build
        run: |
          ninja install
      - name: Check installation
        if: ${{steps.install.outcome == 'success'}}
        working-directory: install
        run: |
          for exe in orange-update celer-export-geant celer-dump-data \
            celer-sim celer-g4; do
            test -x "bin/${exe}"
          done
          ./bin/celer-sim --version
      - name: Build examples
        # TODO: ASAN requires flags downstream
        env:
          CELER_DISABLE_ACCEL_EXAMPLES: >-
            ${{
              (   (matrix.special == 'minimal')
               || (matrix.special == 'float')
              ) && '1' || ''
            }}
        if: >-
          ${{
            (matrix.special != 'asanlite')
            && (matrix.special != 'clang-tidy')
          }}
        run: |
          . ${SPACK_VIEW}/rc
          ./scripts/ci/test-examples.sh
      - name: Show ccache stats
        if: ${{!cancelled()}}
        run: |
          ccache -s

# vim: set nowrap tw=100:
