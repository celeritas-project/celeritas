//---------------------------------*-CUDA-*----------------------------------//
// Copyright 2021-2022 UT-Battelle, LLC, and other Celeritas developers.
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: (Apache-2.0 OR MIT)
//---------------------------------------------------------------------------//
//! \file demo-loop/generated/ProcessInteractionsKernel.cu
//! \note Auto-generated by gen-demo-loop-kernel.py: DO NOT MODIFY!
//---------------------------------------------------------------------------//
#include "base/device_runtime_api.h"
#include "base/Assert.hh"
#include "base/Types.hh"
#include "base/KernelParamCalculator.device.hh"
#include "comm/Device.hh"
#include "sim/TrackLauncher.hh"
#include "../LDemoLauncher.hh"

using namespace celeritas;

namespace demo_loop
{
namespace generated
{
namespace
{
__global__ void
#if CELERITAS_LAUNCH_BOUNDS
#if CELERITAS_USE_CUDA && (__CUDA_ARCH__ == 700) // Tesla V100-SXM2-16GB
__launch_bounds__(1024, 8)
#endif
#if CELERITAS_USE_HIP && defined(__gfx90a__)
__launch_bounds__(1024, 8)
#endif
#endif // CELERITAS_LAUNCH_BOUNDS
process_interactions_kernel(
    CoreParamsDeviceRef const params,
    CoreStateDeviceRef const states)
{
    auto tid = KernelParamCalculator::thread_id();
    if (!(tid < states.size()))
        return;

    auto launch = make_track_launcher(params, states, process_interactions_track);
    launch(tid);
}
} // namespace

void process_interactions(
    const celeritas::CoreParamsDeviceRef& params,
    const celeritas::CoreStateDeviceRef& states)
{
    CELER_EXPECT(params);
    CELER_EXPECT(states);
    CELER_LAUNCH_KERNEL(process_interactions,
                        celeritas::device().default_block_size(),
                        states.size(),
                        params, states);
}

} // namespace generated
} // namespace demo_loop
